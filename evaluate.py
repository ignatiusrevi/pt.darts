""" Evaluate models """
import time
import torch
import torch.nn as nn
import numpy as np
import utils
from IPython.core.debugger import set_trace
import genotypes as gt
from models import ops
# from config import EvaluateConfig

# Supernet
from models.search_cnn_cka  import SearchCNNControllerCKA
# ChildNet
from models.augment_cnn_cka import AugmentCNNCKA

import scripts.cka as cka
import scripts.cca as cca

device_ids = [0]
device = torch.device('cuda:0')

def main():
    # Breakdown the Composition of DARTS
    # childnet = torch.load('./results/02-random-beta-childnet/best.pth.tar', map_location=torch.device(device))
    # childnet.module.cells[0].dag[0][0]
    # supernet = torch.load('./results/02-random-beta-supernet/best.pth.tar', map_location=torch.device(device))
    # supernet.net.cells[0].dag[0][0]._ops[5].net[1]

    input_size, input_channels, n_classes, train_data = utils.get_data('CIFAR10', './data/', cutout_length=0, validation=False)

    net_crit = nn.CrossEntropyLoss().to(device)
    supernet = SearchCNNControllerCKA(C_in=input_channels, C=16, n_classes=n_classes, n_layers=8, criterion=net_crit, device_ids=device_ids)
    childnet = AugmentCNNCKA(input_size=input_size, C_in=input_channels, C=16, n_classes=10, n_layers=16, auxiliary=True, genotype=gt.from_str("Genotype(normal=[[('sep_conv_3x3', 1), ('sep_conv_3x3', 0)], [('sep_conv_3x3', 1), ('sep_conv_3x3', 0)], [('sep_conv_3x3', 1), ('sep_conv_5x5', 0)], [('sep_conv_3x3', 0), ('sep_conv_5x5', 1)]], normal_concat=range(2, 6), reduce=[[('sep_conv_3x3', 1), ('max_pool_3x3', 0)], [('max_pool_3x3', 2), ('sep_conv_5x5', 0)], [('dil_conv_5x5', 3), ('sep_conv_5x5', 1)], [('max_pool_3x3', 4), ('sep_conv_5x5', 0)]], reduce_concat=range(2, 6))"))
    childnet = nn.DataParallel(childnet, device_ids=device_ids).to(device)

    utils.load(supernet, './results/02-random-beta-supernet/weights.pt')
    utils.load(childnet, './results/02-random-beta-l16-init16-64-childnet/weights.pt')
    supernet.to(device)
    childnet.to(device)

    supernet.eval()
    childnet.eval()

    n_cells = len(supernet.net.cells)
    n_ops   = 8
    for i in range(n_cells): # 8 Cells
        # Normal Cell
        if i not in [n_cells//3, 2*n_cells//3]:
            # DAG 0
            for k in range(2):
                for j in range(n_ops):
                    if j != 3: # sep_conv_3x3
                        supernet.net.cells[i].dag[0][k]._ops[j] = ops.Zero(stride=1)

            # DAG 1
            for k in range(2):
                for j in range(n_ops):
                    if j != 3: # sep_conv_3x3
                        supernet.net.cells[i].dag[1][k]._ops[j] = ops.Zero(stride=1)
            for j in range(n_ops):
                supernet.net.cells[i].dag[1][2]._ops[j]         = ops.Zero(stride=1)

            # DAG 2
            for j in range(n_ops):
                if j != 4: # sep_conv_5x5
                    supernet.net.cells[i].dag[2][0]._ops[j] = ops.Zero(stride=1)
            for j in range(n_ops):
                if j != 3: # sep_conv_3x3
                    supernet.net.cells[i].dag[2][1]._ops[j] = ops.Zero(stride=1)
            for k in range(2,4):
                for j in range(n_ops):
                    supernet.net.cells[i].dag[2][k]._ops[j] = ops.Zero(stride=1)

            # DAG 3
            for j in range(n_ops):
                if j != 3: # sep_conv_3x3
                    supernet.net.cells[i].dag[3][0]._ops[j] = ops.Zero(stride=1)
            for j in range(n_ops):
                if j != 4: # sep_conv_5x5
                    supernet.net.cells[i].dag[3][1]._ops[j] = ops.Zero(stride=1)
            for k in range(2,5):
                for j in range(n_ops):
                    supernet.net.cells[i].dag[3][k]._ops[j] = ops.Zero(stride=1)
        # Reduction Cell
        else: 
            # DAG 0
            for j in range(n_ops):
                if j != 1: # max_pool_3x3
                    supernet.net.cells[i].dag[0][0]._ops[j] = ops.Zero(stride=2)
            for j in range(n_ops):
                if j != 3: # sep_conv_3x3
                    supernet.net.cells[i].dag[0][1]._ops[j] = ops.Zero(stride=2)

            # DAG 1
            for j in range(n_ops):
                if j != 4: # sep_conv_5x5
                    supernet.net.cells[i].dag[1][0]._ops[j] = ops.Zero(stride=2)
            for j in range(n_ops):
                supernet.net.cells[i].dag[1][1]._ops[j]     = ops.Zero(stride=2)
            for j in range(n_ops):
                if j != 1: # max_pool_3x3
                    supernet.net.cells[i].dag[1][2]._ops[j] = ops.Zero(stride=1)

            # DAG 2
            for j in range (n_ops):
                if j != 4: # sep_conv_5x5
                    supernet.net.cells[i].dag[2][1]._ops[j] = ops.Zero(stride=2)
            for j in range(n_ops):
                if j != 6: # dil_conv_5x5
                    supernet.net.cells[i].dag[2][3]._ops[j] = ops.Zero(stride=1)
            w = [0, 2]
            for k in w:
                if k == 0:
                    stride = 2
                else:
                    stride = 1
                for j in range(n_ops):
                    supernet.net.cells[i].dag[2][k]._ops[j] = ops.Zero(stride=stride)

            # DAG 3
            for j in range(n_ops):
                if j != 4: # sep_conv_5x5
                    supernet.net.cells[i].dag[3][0]._ops[j] = ops.Zero(stride=2)
            for j in range(n_ops):
                if j != 1: # max_pool_3x3
                    supernet.net.cells[i].dag[3][4]._ops[j] = ops.Zero(stride=1)
            for k in range(1,4):
                if k == 1:
                    stride = 2
                else:
                    stride = 1
                for j in range(n_ops):
                    supernet.net.cells[i].dag[3][k]._ops[j] = ops.Zero(stride=stride)

    # Test Image Batch
    img = torch.cat([train_data[i][0].view(-1, 3, input_size, input_size) for i in range(64)], dim=0)
    img = img.to(device, non_blocking=True)

    # Evaluate Forward Pass
    with torch.no_grad():
        supernet(img) # len(supernet.net.outpts)
        childnet(img) # len(childnet.module.outputs)

        sout = [x.view(64,-1).cpu().numpy() for x in supernet.net.outputs]
        cout = [x.view(64,-1).cpu().numpy() for x in childnet.module.outputs]

        lcka_arr   = {}
        rbfcka_arr = {}
        lcka_arr_debiased = {}
        cca_arr    = {}

        for i, s in enumerate(sout):
            print('Itr:', i)
            lcka_tmp   = {}
            rbfcka_tmp = {}
            lcka_tmp_debiased = {}
            cca_tmp    = {}
            for j, c in enumerate(cout):
                if s.shape == c.shape:
                    # Linear CKA
                    lcka = cka.feature_space_linear_cka(s, c)
                    lcka_tmp[(i,j)] = lcka
                    # Non-Linear CKA
                    rbfcka = cka.cka(cka.gram_rbf(s, 0.5), cka.gram_rbf(c, 0.5))
                    rbfcka_tmp[(i,j)] = rbfcka
                    # Linear CKA Debiased
                    lcka_debiased = cka.feature_space_linear_cka(s, c, debiased=True)
                    lcka_tmp_debiased[(i,j)] = lcka_debiased
                    # CCA
                    rcca = cca.cca(s, c)
                    cca_tmp[(i,j)] = rcca
            lcka_arr[i]   = lcka_tmp
            rbfcka_arr[i] = rbfcka_tmp
            lcka_arr_debiased[i] = lcka_tmp_debiased
            cca_arr[i]    = cca_tmp

    print('Linear CKA: ',          lcka_arr)
    print()
    print('RBF CKA: ',             rbfcka_arr)
    print()
    print('Linear CKA Debiased: ', lcka_arr_debiased)
    print()
    print('CCA: ',                 cca_arr)

    '''
    CKA-l8-64

    Linear CKA:  {0: {(0, 0): 0.8328535760767377, (0, 1): 0.7788916022689075}, 
                  1: {(1, 0): 0.8079274954285709, (1, 1): 0.7963110169057394}, 
                  2: {(2, 2): 0.7799838905546352, (2, 3): 0.663976403648518, (2, 4): 0.6002347976821842}, 
                  3: {(3, 2): 0.7634077638950499, (3, 3): 0.649255971609716, (3, 4): 0.5902767301160605}, 
                  4: {(4, 2): 0.7694462149344811, (4, 3): 0.643674621854729, (4, 4): 0.5815169127676262}, 
                  5: {(5, 5): 0.6395715289188378, (5, 6): 0.562095052666216, (5, 7): 0.3018609424642878}, 
                  6: {(6, 5): 0.7545886649030376, (6, 6): 0.679090813054925, (6, 7): 0.36491994642353776}, 
                  7: {(7, 5): 0.726663672848422,  (7, 6): 0.650431395970726, (7, 7): 0.3665040948360681}}

    RBF CKA:     {0: {(0, 0): 0.9406557, (0, 1): 0.9321029}, 
                  1: {(1, 0): 0.9326793, (1, 1): 0.93127054}, 
                  2: {(2, 2): 0.9248978, (2, 3): 0.8966035, (2, 4): 0.88344526}, 
                  3: {(3, 2): 0.9172881, (3, 3): 0.8884339, (3, 4): 0.876322}, 
                  4: {(4, 2): 0.9156036, (4, 3): 0.8836428, (4, 4): 0.87148094}, 
                  5: {(5, 5): 0.8944931, (5, 6): 0.8783169, (5, 7): 0.61382633}, 
                  6: {(6, 5): 0.9487136, (6, 6): 0.9337911, (6, 7): 0.6522991}, 
                  7: {(7, 5): 0.9379861, (7, 6): 0.9220003, (7, 7): 0.650306}}

    Linear CKA Debiased:  {0: {(0, 0): 0.9359392049790847, (0, 1): 0.8037465625658307}, 
                           1: {(1, 0): 0.8756431241037442, (1, 1): 0.8629399056679641}, 
                           2: {(2, 2): 0.7792649408593321, (2, 3): 0.5484618977769247,  (2, 4):  0.2678058515697928}, 
                           3: {(3, 2): 0.7339382696305976, (3, 3): 0.49177801238799773, (3, 4): 0.23629907345554466}, 
                           4: {(4, 2): 0.822311050188199,  (4, 3): 0.60326601797061,    (4, 4): 0.31574449832316454}, 
                           5: {(5, 5): 0.4290127223119876, (5, 6): 0.28897451322552664, (5, 7): 0.08535510059644492}, 
                           6: {(6, 5): 0.4662279444487991, (6, 6): 0.33444309445339276, (6, 7): 0.09053164013378423}, 
                           7: {(7, 5): 0.4592687860354769, (7, 6): 0.3260504393529013,  (7, 7): 0.11483459764259811}}

    CCA:         {0: {(0, 0): 0.0009765625, (0, 1): 0.0009765625}, 
                  1: {(1, 0): 0.0009765625, (1, 1): 0.0009765623835846816}, 
                  2: {(2, 2): 0.001953125,  (2, 3): 0.001953125, (2, 4): 0.001953125}, 
                  3: {(3, 2): 0.0019531247, (3, 3): 0.001953125, (3, 4): 0.001953125}, 
                  4: {(4, 2): 0.0019531247, (4, 3): 0.001953125, (4, 4): 0.001953125}, 
                  5: {(5, 5): 0.00390625,   (5, 6): 0.00390625,  (5, 7): 0.00390625}, 
                  6: {(6, 5): 0.00390625,   (6, 6): 0.00390625,  (6, 7): 0.00390625}, 
                  7: {(7, 5): 0.0039062495, (7, 6): 0.00390625,  (7, 7): 0.0039062495343387266}}
    '''

    '''
    CKA-l8-96

    Linear CKA:  {0: {(0, 0): 0.8657758977307071, (0, 1): 0.7252689215550284}, 
                  1: {(1, 0): 0.8491905398582124, (1, 1): 0.7578524777478035}, 
                  2: {(2, 2): 0.7715327715403418, (2, 3): 0.664866761124665,  (2, 4): 0.6182232825721212}, 
                  3: {(3, 2): 0.7685066624187927, (3, 3): 0.6538225713375204, (3, 4): 0.6158398752247314}, 
                  4: {(4, 2): 0.7628401630474201, (4, 3): 0.6426905348291893, (4, 4): 0.6026920845123085}, 
                  5: {(5, 5): 0.6493959906329707, (5, 6): 0.5794062915343754, (5, 7): 0.2629509687279048}, 
                  6: {(6, 5): 0.7629123911805326, (6, 6): 0.6952849142079661, (6, 7): 0.34566161292731185}, 
                  7: {(7, 5): 0.7432488804765783, (7, 6): 0.6713959271893811, (7, 7): 0.34862670452569067}}

    RBF CKA:     {0: {(0, 0): 0.9517884, (0, 1): 0.9338336}, 
                  1: {(1, 0): 0.9452221, (1, 1): 0.93357855}, 
                  2: {(2, 2): 0.9255855, (2, 3): 0.9008065, (2, 4): 0.88937455}, 
                  3: {(3, 2): 0.9201559, (3, 3): 0.8942654, (3, 4): 0.88470256}, 
                  4: {(4, 2): 0.9115309, (4, 3): 0.8820146, (4, 4): 0.8718834}, 
                  5: {(5, 5): 0.8978233, (5, 6): 0.8825315, (5, 7): 0.5962776}, 
                  6: {(6, 5): 0.95061713, (6, 6): 0.936476, (6, 7): 0.63451517}, 
                  7: {(7, 5): 0.94182336, (7, 6): 0.926734, (7, 7): 0.63344204}}

    Linear CKA Debiased:  {0: {(0, 0): 0.9503798217220855, (0, 1): 0.7627867280149697}, 
                           1: {(1, 0): 0.9223125310781016, (1, 1): 0.8295214486592853}, 
                           2: {(2, 2): 0.7934688849511303, (2, 3): 0.5123290981763224, (2, 4): 0.32550234550082374}, 
                           3: {(3, 2): 0.7908826173935941, (3, 3): 0.4858611836370285, (3, 4): 0.3234154170239845}, 
                           4: {(4, 2): 0.8445338415258139, (4, 3): 0.5499516001605483, (4, 4): 0.3737229761519269}, 
                           5: {(5, 5): 0.448804614528437,  (5, 6): 0.3006718396923722, (5, 7): 0.03556187650964222}, 
                           6: {(6, 5): 0.4773907133781866, (6, 6): 0.3294766452032794, (6, 7): 0.06415958478895567}, 
                           7: {(7, 5): 0.4791735467871810, (7, 6): 0.3258298547250243, (7, 7): 0.08517673774175248}}

    CCA:         {0: {(0, 0): 0.0009765625, (0, 1): 0.0009765625}, 
                  1: {(1, 0): 0.0009765625, (1, 1): 0.0009765625}, 
                  2: {(2, 2): 0.001953125,  (2, 3): 0.001953124767, (2, 4): 0.001953125}, 
                  3: {(3, 2): 0.0019531247, (3, 3): 0.001953124767, (3, 4): 0.001953125}, 
                  4: {(4, 2): 0.001953125,  (4, 3): 0.001953125,    (4, 4): 0.001953125}, 
                  5: {(5, 5): 0.00390625,   (5, 6): 0.00390625,     (5, 7): 0.00390625}, 
                  6: {(6, 5): 0.00390625,   (6, 6): 0.00390625,     (6, 7): 0.00390625}, 
                  7: {(7, 5): 0.00390625,   (7, 6): 0.00390625,     (7, 7): 0.0039062495343387266}}
    '''

    '''
    CKA l12-64

    Linear CKA:  {0: {(0, 0): 0.6169534587563276, (0, 1): 0.8885383614308577, (0, 2): 0.7090281070858345, (0, 3): 0.8071375423154845}, 
                  1: {(1, 0): 0.646828235871255,  (1, 1): 0.8820361740920657, (1, 2): 0.7109258542252779, (1, 3): 0.8349238797197202}, 
                  2: {(2, 4): 0.704084158170997,  (2, 5): 0.6927057667833194, (2, 6): 0.6275753432430897, (2, 7): 0.6575346894630825}, 
                  3: {(3, 4): 0.693392643804104,  (3, 5): 0.6721805537841758, (3, 6): 0.6196846719106607, (3, 7): 0.6401046992932007}, 
                  4: {(4, 4): 0.6947021081463047, (4, 5): 0.6621085528076285, (4, 6): 0.5983826006228143, (4, 7): 0.6367818852230068}, 
                  5: {(5, 8): 0.6417586323914078, (5, 9): 0.607414070166256,  (5, 10): 0.536187467608141, (5, 11): 0.2567563194326535}, 
                  6: {(6, 8): 0.7519781984387114, (6, 9): 0.7147981406520834, (6, 10): 0.624740872563823, (6, 11): 0.3267126234484639}, 
                  7: {(7, 8): 0.7322926260477755, (7, 9): 0.7064094333248164, (7, 10): 0.614911075489134, (7, 11): 0.3224440208079049}}

    RBF CKA:     {0: {(0, 0): 0.91568154, (0, 1): 0.96051806, (0, 2): 0.90647995, (0, 3): 0.9342513}, 
                  1: {(1, 0): 0.91429675, (1, 1): 0.95857793, (1, 2): 0.9049963,  (1, 3): 0.93909895}, 
                  2: {(2, 4): 0.9090273,  (2, 5): 0.90806496, (2, 6): 0.89524776, (2, 7): 0.90066844}, 
                  3: {(3, 4): 0.90134645, (3, 5): 0.8994093,  (3, 6): 0.88722456, (3, 7): 0.89233345}, 
                  4: {(4, 4): 0.901394,   (4, 5): 0.89577305, (4, 6): 0.8832621,  (4, 7): 0.8913761}, 
                  5: {(5, 8): 0.90978533, (5, 9): 0.90168816, (5, 10): 0.8702295, (5, 11): 0.5457297}, 
                  6: {(6, 8): 0.9509436,  (6, 9): 0.9415394,  (6, 10): 0.9093355, (6, 11): 0.57371277}, 
                  7: {(7, 8): 0.9420107,  (7, 9): 0.93423814, (7, 10): 0.9017398, (7, 11): 0.57172}}

    Linear CKA Debiased:  {0: {(0, 0): 0.5552526226928747, (0, 1): 0.887681350555846, (0, 2): nan, (0, 3): 0.6930240708315276}, 
                       1: {(1, 0): 0.584919589429789,  (1, 1): 0.864943095472381, (1, 2): nan, (1, 3): 0.7655545619091926}, 
                       2: {(2, 4): 0.5142154340962034, (2, 5): 0.521837335334867, (2, 6): 0.24844754539686767, (2, 7): 0.35124703063941537}, 
                       3: {(3, 4): 0.4970687852435006, (3, 5): 0.461315749102641, (3, 6): 0.24501307886685791, (3, 7): 0.31592673743536503}, 
                       4: {(4, 4): 0.5881005169827854, (4, 5): 0.524603299640469, (4, 6): 0.2813025354831171,  (4, 7): 0.36273702806192165}, 
                       5: {(5, 8): 0.3721193742898006, (5, 9): 0.319718165773971, (5, 10): 0.2529179154898688, (5, 11): 0.030537119531992396}, 
                       6: {(6, 8): 0.4023655081372264, (6, 9): 0.367462493915189, (6, 10): 0.2748341207148528, (6, 11): 0.05363811231993702}, 
                       7: {(7, 8): 0.4134384538645171, (7, 9): 0.400094741545342, (7, 10): 0.2937528363766138, (7, 11): 0.06637082941450395}}

    CCA:         {0: {(0, 0): 0.0009765625, (0, 1): 0.0009765625, (0, 2): 0.0009765625, (0, 3): 0.0009765625}, 
                  1: {(1, 0): 0.0009765625, (1, 1): 0.0009765625, (1, 2): 0.0009765623, (1, 3): 0.0009765623835846816}, 
                  2: {(2, 4): 0.001953125,  (2, 5): 0.001953125,  (2, 6): 0.0019531247, (2, 7): 0.001953125}, 
                  3: {(3, 4): 0.001953125,  (3, 5): 0.0019531247, (3, 6): 0.001953125,  (3, 7): 0.001953125}, 
                  4: {(4, 4): 0.001953125,  (4, 5): 0.001953125,  (4, 6): 0.001953125,  (4, 7): 0.001953125}, 
                  5: {(5, 8): 0.00390625,   (5, 9): 0.0039062495, (5, 10): 0.00390625,  (5, 11): 0.00390625}, 
                  6: {(6, 8): 0.00390625,   (6, 9): 0.00390625,   (6, 10): 0.003906249, (6, 11): 0.00390625}, 
                  7: {(7, 8): 0.00390625,   (7, 9): 0.00390625,   (7, 10): 0.00390625,  (7, 11): 0.00390625}}

    '''

    '''
    CKA-l12-96

    Linear CKA:  {0: {(0, 0): 0.6940081106734277, (0, 1): 0.8600763934506113, (0, 2): 0.6740575317082785, (0, 3): 0.7409453397515952}, 
                  1: {(1, 0): 0.7023739813060796, (1, 1): 0.8731279770204609, (1, 2): 0.6727366487349725, (1, 3): 0.7733345688252928}, 
                  2: {(2, 4): 0.7410174918844209, (2, 5): 0.6583700623650474, (2, 6): 0.6583118766334219, (2, 7): 0.6229830133387809}, 
                  3: {(3, 4): 0.726583486109368,  (3, 5): 0.6346385607062608, (3, 6): 0.6416735998408782, (3, 7): 0.6017011580050959}, 
                  4: {(4, 4): 0.7330630112596996, (4, 5): 0.6292761951538066, (4, 6): 0.6345467835813833, (4, 7): 0.6011714415557358}, 
                  5: {(5, 8): 0.6536003660440073, (5, 9): 0.5803543662502642, (5, 10): 0.582803070904421, (5, 11): 0.27168623994131696}, 
                  6: {(6, 8): 0.7416351517593311, (6, 9): 0.6756990274270345, (6, 10): 0.649123657040479, (6, 11): 0.33625344996566364}, 
                  7: {(7, 8): 0.7146674897992026, (7, 9): 0.6608297130149373, (7, 10): 0.632898166627224, (7, 11): 0.31898110546764763}}

    RBF CKA:     {0: {(0, 0): 0.9258429, (0, 1): 0.95982355, (0, 2): 0.9098282, (0, 3): 0.9310464}, 
                  1: {(1, 0): 0.9226206, (1, 1): 0.95982057, (1, 2): 0.9081557, (1, 3): 0.93380666}, 
                  2: {(2, 4): 0.922949,  (2, 5): 0.90536517, (2, 6): 0.9046807, (2, 7): 0.896654}, 
                  3: {(3, 4): 0.9130609, (3, 5): 0.8931587,  (3, 6): 0.8940688, (3, 7): 0.8852169}, 
                  4: {(4, 4): 0.9135227, (4, 5): 0.88989204, (4, 6): 0.8910969, (4, 7): 0.88268197}, 
                  5: {(5, 8): 0.9138712, (5, 9): 0.8901717,  (5, 10): 0.894919, (5, 11): 0.5694279}, 
                  6: {(6, 8): 0.9490692, (6, 9): 0.9281069,  (6, 10): 0.925259, (6, 11): 0.59277314}, 
                  7: {(7, 8): 0.9375196, (7, 9): 0.9193489,  (7, 10): 0.916137, (7, 11): 0.5874232}}

    Linear CKA Debiased:  {0: {(0, 0): 0.7113397901997809, (0, 1): 0.8956791857538806, (0, 2): nan, (0, 3): 0.5917189246082082}, 
                           1: {(1, 0): 0.6821620764135631, (1, 1): 0.9061317732654948, (1, 2): nan, (1, 3): 0.6708470176460953}, 
                           2: {(2, 4): 0.6311940283598674, (2, 5): 0.4946498195429021, (2, 6): 0.44568021933293755, (2, 7): 0.29690658241559054},
                           3: {(3, 4): 0.6078803007040615, (3, 5): 0.4233247424866189, (3, 6): 0.4062996881753553,  (3, 7): 0.24927640862309075},
                           4: {(4, 4): 0.6799540668703452, (4, 5): 0.513863728990747,  (4, 6): 0.4685862744596322,  (4, 7): 0.3244546805376437}, 
                           5: {(5, 8): 0.4053268813284695, (5, 9): 0.2765998091683679, (5, 10): 0.3312368597589444, (5, 11): 0.04743202072425514}, 
                           6: {(6, 8): 0.4191608234216332, (6, 9): 0.3189730738498147, (6, 10): 0.3305172751326828, (6, 11): 0.07806302156380636}, 
                           7: {(7, 8): 0.4162990432199415, (7, 9): 0.3386292893140957, (7, 10): 0.3385218751143467, (7, 11): 0.0713300740268847}}

    CCA:         {0: {(0, 0): 0.0009765623, (0, 1): 0.0009765625, (0, 2): 0.0009765625, (0, 3): 0.0009765623835846816}, 
                  1: {(1, 0): 0.0009765625, (1, 1): 0.0009765625, (1, 2): 0.0009765625, (1, 3): 0.0009765625}, 
                  2: {(2, 4): 0.001953125,  (2, 5): 0.001953125,  (2, 6): 0.001953125,  (2, 7): 0.001953125}, 
                  3: {(3, 4): 0.001953125,  (3, 5): 0.001953125,  (3, 6): 0.001953125,  (3, 7): 0.001953125}, 
                  4: {(4, 4): 0.001953125,  (4, 5): 0.001953125,  (4, 6): 0.001953125,  (4, 7): 0.001953125}, 
                  5: {(5, 8): 0.00390625,   (5, 9): 0.00390625,   (5, 10): 0.00390625,  (5, 11): 0.00390625}, 
                  6: {(6, 8): 0.00390625,   (6, 9): 0.0039062495, (6, 10): 0.003906249, (6, 11): 0.00390625}, 
                  7: {(7, 8): 0.00390625,   (7, 9): 0.00390625,   (7, 10): 0.00390625,  (7, 11): 0.00390625}}
    '''

    '''
    CKA-l16-64

    Linear CKA:  {0: {(0, 0): 0.9556039826882382, (0, 1): 0.680493680024424, (0, 2): 0.8436185795534565,(0, 3): 0.7205965698858505, (0, 4): 0.8348241521399311}, 
                  1: {(1, 0): 0.9534563743056216, (1, 1): 0.689676063308854, (1, 2): 0.829816157703689, (1, 3): 0.7311672742997334, (1, 4): 0.8721920579176209},
                  2: {(2, 5): 0.6813096195113797, (2, 6): 0.726468007837530, (2, 7): 0.609094208492749, (2, 8): 0.6666697121045176, (2, 9): 0.6464647904431808}, 
                  3: {(3, 5): 0.6676808978560642, (3, 6): 0.713466765515794, (3, 7): 0.600849466602556, (3, 8): 0.6586931543099303, (3, 9): 0.6352284132902827}, 
                  4: {(4, 5): 0.671241895438247,  (4, 6): 0.711640014037929, (4, 7): 0.5859655778447,   (4, 8): 0.6449461886618199, (4, 9): 0.6354539283627749}, 
                  5: {(5, 10): 0.665869683944943, (5, 11): 0.52218651207587, (5, 12): 0.54547534989176, (5, 13): 0.490909454392068, (5, 14): 0.4840240513887798, (5, 15): 0.24409192245701078}, 
                  6: {(6, 10): 0.772209016771736, (6, 11): 0.63394939705612, (6, 12): 0.64078745554646, (6, 13): 0.555746709178957, (6, 14): 0.5310552300805811, (6, 15): 0.30607597503613737}, 
                  7: {(7, 10): 0.735892095964958, (7, 11): 0.61132366580593, (7, 12): 0.60371254650932, (7, 13): 0.539843189265923, (7, 14): 0.5049915976738687, (7, 15): 0.2982945248527775}}

    RBF CKA:     {0: {(0, 0): 0.9846224, (0, 1): 0.91978824, (0, 2): 0.9445436, (0, 3): 0.9151489, (0, 4): 0.9461493}, 
                  1: {(1, 0): 0.9809254, (1, 1): 0.916032,   (1, 2): 0.939892,  (1, 3): 0.9146867, (1, 4): 0.95147496}, 
                  2: {(2, 5): 0.9054643, (2, 6): 0.9120932,  (2, 7): 0.8845545, (2, 8): 0.8981840, (2, 9): 0.8931925}, 
                  3: {(3, 5): 0.9051104, (3, 6): 0.9112257,  (3, 7): 0.8851761, (3, 8): 0.8984632, (3, 9): 0.8930743}, 
                  4: {(4, 5): 0.8986235, (4, 6): 0.90339744, (4, 7): 0.8754762, (4, 8): 0.8895770, (4, 9): 0.8860478}, 
                  5: {(5, 10): 0.905595, (5, 11): 0.8687144, (5, 12): 0.864066, (5, 13): 0.814000, (5, 14): 0.73690504, (5, 15): 0.48375422}, 
                  6: {(6, 10): 0.953202, (6, 11): 0.9200724, (6, 12): 0.909398, (6, 13): 0.847664, (6, 14): 0.7612736,  (6, 15): 0.5107815}, 
                  7: {(7, 10): 0.941293, (7, 11): 0.9106571, (7, 12): 0.896926, (7, 13): 0.841473, (7, 14): 0.7543558,  (7, 15): 0.51133376}}

    Linear CKA Debiased:  {0: {(0, 0): 0.9470116860636583, (0, 1): 1.0587172516601693, (0, 2): 0.9323397358162926, (0, 3): 1.120691262260932, (0, 4): 0.7438289029386361}, 
                           1: {(1, 0): 0.9518387089777575, (1, 1): 1.0141367413647633, (1, 2): 0.9065490546820102, (1, 3): 1.258034036931525, (1, 4): 0.8393671967902586}, 
                           2: {(2, 5): 0.4578072123274336, (2, 6): 0.6959173780541672, (2, 7): 0.2895546923281673, (2, 8): 0.464981324029768, (2, 9): 0.36474725184689566}, 
                           3: {(3, 5): 0.4365164521798405, (3, 6): 0.6583453602956142, (3, 7): 0.2600097781504910, (3, 8): 0.445417410240789, (3, 9): 0.3411854967128762}, 
                           4: {(4, 5): 0.5088652877700814, (4, 6): 0.7565996001764651, (4, 7): 0.3812821195289493, (4, 8): 0.499277156686563, (4, 9): 0.4113134420826384}, 
                           5: {(5, 10): 0.45477442550613,  (5, 11): 0.210402809416224, (5, 12): 0.282881533181263, (5, 13): 0.27106551918583, (5, 14): 0.29640391394307736, (5, 15): 0.039547210645990996}, 
                           6: {(6, 10): 0.489498273443572, (6, 11): 0.255561171221158, (6, 12): 0.323962323183867, (6, 13): 0.28571554567459, (6, 14): 0.30466378179459114, (6, 15): 0.05286941526921066}, 
                           7: {(7, 10): 0.476834594869332, (7, 11): 0.272686961805644, (7, 12): 0.305893697538069, (7, 13): 0.29100376093586, (7, 14): 0.28523289320291584, (7, 15): 0.06478362306329878}}

    CCA:         {0: {(0, 0): 0.0009765625, (0, 1): 0.0009765625, (0, 2): 0.0009765625, (0, 3): 0.0009765625, (0, 4): 0.0009765625}, 
                  1: {(1, 0): 0.0009765625, (1, 1): 0.0009765625, (1, 2): 0.0009765625, (1, 3): 0.0009765625, (1, 4): 0.0009765625}, 
                  2: {(2, 5): 0.001953125,  (2, 6): 0.001953125,  (2, 7): 0.001953125,  (2, 8): 0.001953125,  (2, 9): 0.001953125}, 
                  3: {(3, 5): 0.001953125,  (3, 6): 0.001953125,  (3, 7): 0.001953125,  (3, 8): 0.0019531247, (3, 9): 0.001953125}, 
                  4: {(4, 5): 0.001953125,  (4, 6): 0.001953125,  (4, 7): 0.001953125,  (4, 8): 0.001953125,  (4, 9): 0.001953125},
                  5: {(5, 10): 0.00390625,  (5, 11): 0.00390625,  (5, 12): 0.00390625,  (5, 13): 0.003906249, (5, 14): 0.00390625, (5, 15): 0.00390625}, 
                  6: {(6, 10): 0.00390625,  (6, 11): 0.00390625,  (6, 12): 0.00390625,  (6, 13): 0.00390625,  (6, 14): 0.00390625, (6, 15): 0.00390625}, 
                  7: {(7, 10): 0.00390625,  (7, 11): 0.003906249, (7, 12): 0.003906249, (7, 13): 0.00390625,  (7, 14): 0.00390625, (7, 15): 0.00390625}}
    '''

    '''
    CKA-l16-96

    Linear CKA:  {0: {(0, 0): 0.8819729225429638, (0, 1): 0.7661076911343077, (0, 2): 0.7056332704035004, (0, 3): 0.7763301514897607, (0, 4): 0.7625223013439022}, 
                  1: {(1, 0): 0.8895318425610788, (1, 1): 0.7730198802090792, (1, 2): 0.6951294937898005, (1, 3): 0.7799678839557581, (1, 4): 0.7684905531129907}, 
                  2: {(2, 5): 0.6827462625955268, (2, 6): 0.7024855071851727, (2, 7): 0.6595065817626096, (2, 8): 0.6644728488432019, (2, 9): 0.6430083865393047}, 
                  3: {(3, 5): 0.6726169989397945, (3, 6): 0.6977909291505257, (3, 7): 0.6599997486063547, (3, 8): 0.6671997468578741, (3, 9): 0.6461655806077288}, 
                  4: {(4, 5): 0.6711441403849874, (4, 6): 0.6870958954885261, (4, 7): 0.6387589097115944, (4, 8): 0.6494863647927839, (4, 9): 0.6317094369564255}, 
                  5: {(5, 10): 0.662959852827243, (5, 11): 0.553051803778754, (5, 12): 0.529403098696797, (5, 13): 0.583132319664415, (5, 14): 0.48760139847868167, (5, 15): 0.2368027533607475}, 
                  6: {(6, 10): 0.766696210302084, (6, 11): 0.670828555553132, (6, 12): 0.632219041340055, (6, 13): 0.669023765094522, (6, 14): 0.5628313363030916,  (6, 15): 0.3082014630084914}, 
                  7: {(7, 10): 0.750174011228156, (7, 11): 0.667046223566804, (7, 12): 0.623815081694833, (7, 13): 0.663484544942958, (7, 14): 0.5538261410085112,  (7, 15): 0.30982032936585485}}

    RBF CKA:     {0: {(0, 0): 0.9617187,  (0, 1): 0.94006175, (0, 2): 0.9143303, (0, 3): 0.92825186, (0, 4): 0.92604136}, 
                  1: {(1, 0): 0.96213347, (1, 1): 0.9382061,  (1, 2): 0.9112999, (1, 3): 0.92761654, (1, 4): 0.92700464}, 
                  2: {(2, 5): 0.91139156, (2, 6): 0.91086704, (2, 7): 0.9035128, (2, 8): 0.904423,   (2, 9): 0.8983278}, 
                  3: {(3, 5): 0.9020936,  (3, 6): 0.9049553,  (3, 7): 0.8963069, (3, 8): 0.89846575, (3, 9): 0.8924369}, 
                  4: {(4, 5): 0.8980043,  (4, 6): 0.89716816, (4, 7): 0.8879320, (4, 8): 0.8906468,  (4, 9): 0.8843199}, 
                  5: {(5, 10): 0.9005797, (5, 11): 0.8767555, (5, 12): 0.857349, (5, 13): 0.8575042, (5, 14): 0.7626902, (5, 15): 0.4786001}, 
                  6: {(6, 10): 0.9494930, (6, 11): 0.9303632, (6, 12): 0.909891, (6, 13): 0.9020106, (6, 14): 0.8017474, (6, 15): 0.5146177}, 
                  7: {(7, 10): 0.9412343, (7, 11): 0.924202,  (7, 12): 0.902415, (7, 13): 0.8970192, (7, 14): 0.7980595, (7, 15): 0.51674116}}

    Linear CKA Debiased:  {0: {(0, 0): 0.8567220880987128,  (0, 1): 0.7744584429173629, (0, 2): nan, (0, 3): 1.1356083305281979, (0, 4): 0.6147227246508092}, 
                           1: {(1, 0): 0.8619799016780677,  (1, 1): 0.7727690537593098, (1, 2): nan, (1, 3): 1.230931284951827, (1, 4): 0.6712847700888895}, 
                           2: {(2, 5): 0.47989114619771167, (2, 6): 0.696981083594799,  (2, 7): 0.5324396503663116, (2, 8): 0.4814067442401128, (2, 9): 0.38365883315409066}, 
                           3: {(3, 5): 0.45726153025085464, (3, 6): 0.673539601293337,  (3, 7): 0.53431066745976,   (3, 8): 0.4881359942176953, (3, 9): 0.3896850239639132}, 
                           4: {(4, 5): 0.5224819153247112,  (4, 6): 0.749924976020166,  (4, 7): 0.5794224938529421, (4, 8): 0.5234565125303571, (4, 9): 0.42722973061267194}, 
                           5: {(5, 10): 0.4771232469816284, (5, 11): 0.275051589314834, (5, 12): 0.262771352197708, (5, 13): 0.361955145748050, (5, 14): 0.28211645587058737, (5, 15): 0.03163525419983032}, 
                           6: {(6, 10): 0.4981881453987734, (6, 11): 0.324946191672898, (6, 12): 0.295038028004089, (6, 13): 0.383211243645163, (6, 14): 0.31146201698303094, (6, 15): 0.05475316630009686}, 
                           7: {(7, 10): 0.5120814346074479, (7, 11): 0.361740779591994, (7, 12): 0.324511555769347, (7, 13): 0.402448887257903, (7, 14): 0.31708113882201044, (7, 15): 0.07212962045310402}}

    CCA:         {0: {(0, 0): 0.000976562, (0, 1): 0.000976562, (0, 2): 0.000976562, (0, 3): 0.0009765625, (0, 4): 0.0009765625}, 
                  1: {(1, 0): 0.000976562, (1, 1): 0.000976562, (1, 2): 0.000976562, (1, 3): 0.0009765623, (1, 4): 0.0009765623835846816}, 
                  2: {(2, 5): 0.001953125, (2, 6): 0.001953125, (2, 7): 0.001953125, (2, 8): 0.001953125,  (2, 9): 0.001953125}, 
                  3: {(3, 5): 0.001953125, (3, 6): 0.001953125, (3, 7): 0.001953125, (3, 8): 0.001953125,  (3, 9): 0.001953125}, 
                  4: {(4, 5): 0.001953125, (4, 6): 0.001953125, (4, 7): 0.001953125, (4, 8): 0.001953125,  (4, 9): 0.0019531247671693633}, 
                  5: {(5, 10): 0.00390625, (5, 11): 0.00390625, (5, 12): 0.00390625, (5, 13): 0.00390625,  (5, 14): 0.00390625, (5, 15): 0.00390625}, 
                  6: {(6, 10): 0.00390625, (6, 11): 0.00390625, (6, 12): 0.00390625, (6, 13): 0.00390625,  (6, 14): 0.00390625, (6, 15): 0.0039062495343387266}, 
                  7: {(7, 10): 0.00390625, (7, 11): 0.00390625, (7, 12): 0.00390625, (7, 13): 0.00390625,  (7, 14): 0.00390625, (7, 15): 0.00390625}}

    '''

if __name__ == "__main__":
    start_time = time.time()
    main()
    end_time = time.time()
    duration = end_time - start_time
    print("Total Evaluation Time: %ds" % duration)
